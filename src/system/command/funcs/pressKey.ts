import { keyPressDelay } from '@command/constants/constants'
import { Key, keyboard } from '@nut-tree-fork/nut-js'

const keyStrToKey: Record<string, Key> = {
    'esc': Key.Escape,
    'f1': Key.F1,
    'f2': Key.F2,
    'f3': Key.F3,
    'f4': Key.F4,
    'f5': Key.F5,
    'f6': Key.F6,
    'f7': Key.F7,
    'f8': Key.F8,
    'f9': Key.F9,
    'f10': Key.F10,
    'f11': Key.F11,
    'f12': Key.F12,
    'prtScr': Key.Print,
    'scrollLock': Key.ScrollLock,
    'pause': Key.Pause,
    '`': Key.Grave,
    '1': Key.Num1,
    '2': Key.Num2,
    '3': Key.Num3,
    '4': Key.Num4,
    '5': Key.Num5,
    '6': Key.Num6,
    '7': Key.Num7,
    '8': Key.Num8,
    '9': Key.Num9,
    '0': Key.Num0,
    '-': Key.Minus,
    '=': Key.Equal,
    'backsp': Key.Backspace,
    'ins': Key.Insert,
    'home': Key.Home,
    'pageUp': Key.PageUp,
    'numLock': Key.NumLock,
    'div': Key.Divide,
    'mul': Key.Multiply,
    'sub': Key.Subtract,
    'tab': Key.Tab,
    'q': Key.Q,
    'w': Key.W,
    'e': Key.E,
    'r': Key.R,
    't': Key.T,
    'y': Key.Y,
    'u': Key.U,
    'i': Key.I,
    'o': Key.O,
    'p': Key.P,
    '{': Key.LeftBracket,
    '}': Key.RightBracket,
    '\\': Key.Backslash,
    'del': Key.Delete,
    'end': Key.End,
    'pageDn': Key.PageDown,
    'numPad7': Key.NumPad7,
    'numPad8': Key.NumPad8,
    'numPad9': Key.NumPad9,
    'add': Key.Add,
    'capsLock': Key.CapsLock,
    'a': Key.A,
    's': Key.S,
    'd': Key.D,
    'f': Key.F,
    'g': Key.G,
    'h': Key.H,
    'j': Key.J,
    'k': Key.K,
    'l': Key.L,
    ';': Key.Semicolon,
    "'": Key.Quote,
    'return': Key.Return,
    'numPad4': Key.NumPad4,
    'numPad5': Key.NumPad5,
    'numPad6': Key.NumPad6,
    'shift': Key.LeftShift,
    'z': Key.Z,
    'x': Key.X,
    'c': Key.C,
    'v': Key.V,
    'b': Key.B,
    'n': Key.N,
    'm': Key.M,
    ',': Key.Comma,
    '.': Key.Period,
    '/': Key.Slash,
    'rshift': Key.RightShift,
    'up': Key.Up,
    'numPad1': Key.NumPad1,
    'numPad2': Key.NumPad2,
    'numPad3': Key.NumPad3,
    'enter': Key.Enter,
    'ctrl': Key.LeftControl,
    'win': Key.LeftWin,
    'alt': Key.LeftAlt,
    'rctrl': Key.RightControl,
    'rwin': Key.RightWin,
    'ralt': Key.RightAlt,
    'space': Key.Space,
    'menu': Key.Menu,
    'fn': Key.Fn,
    'left': Key.Left,
    'down': Key.Down,
    'right': Key.Right,
    'numPad0': Key.NumPad0,
    'decimal': Key.Decimal,
    'clear': Key.Clear,
    'audioMute': Key.AudioMute,
    'audioVolDown': Key.AudioVolDown,
    'audioVolUp': Key.AudioVolUp,
    'audioPlay': Key.AudioPlay,
    'audioStop': Key.AudioStop,
    'audioPause': Key.AudioPause,
    'audioPrev': Key.AudioPrev,
    'audioNext': Key.AudioNext,
    'audioRewind': Key.AudioRewind,
    'audioForward': Key.AudioForward,
    'audioRepeat': Key.AudioRepeat,
    'audioRandom': Key.AudioRandom
}

export async function pressKey(comboKey: string): Promise<void> {
    const keyStrs: string[] = comboKey.split('+')

    const keys: Key[] = keyStrs.map((keyStr) => keyStrToKey[keyStr])
    if (keys.some((key) => key === undefined)) return

    keyboard.config.autoDelayMs = keyPressDelay
    await keyboard.pressKey(...keys)
    await keyboard.releaseKey(...keys)
}
